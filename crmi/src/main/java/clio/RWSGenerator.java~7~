package clio;

import com.borland.primetime.util.Debug;

import de.fub.bytecode.*;
import de.fub.bytecode.classfile.*;
import de.fub.bytecode.generic.*;

//import sun.tools.java.Type;

/**
 * RWGenerator rappresenta il builder del sistema.
 * 1. Aggiunge tra le interfacce implementate FastTransportable
 * 2. Aggiunge eventualmente il costruttore di default: con access modifier public
 * 3. Aggiunge eventualmente i metodi
 *      public void writeObject( Container.ContainerOutputStream cos ) throws SerializationException;
 *      public void readObject( Container.ContainerInputStream cis ) throws SerializationException;
 *      public int sizeOf();
 * 4. aggiunge il campo:
 *      public final static long SUID = java.io.ObjectStreamClass.lookup( X.class ).getSerialVersionUID();
 *
 * I campi sono aggiunti con due cicli for () che operano sullo stesso array, quindi la successione delle ReadXXX(), WriteXXX() dovrebbe essere la stessa.
 * Questo ci serve per la serializzazione.
 *
 */

final class RWSGenerator
{
  /**
   * Tipo FastTransportable
   */
  private final static JavaClass FastTransportable_jclass = Repository.lookupClass("run.FastTransportable");
  private final static String init_signature = Utility.methodTypeToSignature("void", new String[] { "" } );

  static JavaClass modify( JavaClass j_cl )
  {
    ClassGen cg;
    ConstantPoolGen cpg;
    InstructionFactory factory;

    cg = new ClassGen( j_cl );
    cpg = cg.getConstantPool();
    factory = new InstructionFactory( cg );

    String read_signature = Utility.methodTypeToSignature("void", new String[] { "Container.ContainerInputStream" } );
    String write_signature = Utility.methodTypeToSignature("void", new String[] { "Container.ContainerOutputStream" } );
    String sizeof_signature = Utility.methodTypeToSignature("int", new String[] { "" } );

    if ( cg.containsMethod( "<init>", init_signature ) == null )
    {
      boolean ok = addInit( cg,cpg, factory );
      if (!ok) return null;
    }
    else
    {
      checkAndSetInit( cg );
    }

    if ( cg.containsMethod( "readObject", read_signature  ) == null )
      addReadObject( cg, cpg, factory  );

    if ( cg.containsMethod( "writeObject", write_signature ) == null )
      addWriteObject( cg, cpg, factory );

    if ( cg.containsMethod( "sizeOf", sizeof_signature ) == null )
      addSizeOf( cg, cpg, factory );

    if ( cg.containsField("SUID") == null )
      addSUID( cg, cpg, factory );

    cg.addInterface("run.FastTransportable");

    return cg.getJavaClass();
  }

  private static void checkAndSetInit( ClassGen cg )
  {
    String init_signature = Utility.methodTypeToSignature("void", new String[] { "" } );
    Method[] method_list = cg.getMethods();

    for ( int i=0; i<method_list.length; ++i )
    {
      if ( method_list[i].getName().equals("<init>") && method_list[i].getSignature().equals(init_signature) )
      {
	int access_flags = method_list[i].getAccessFlags();

	access_flags &= ~ (Constants.ACC_PRIVATE | Constants.ACC_PROTECTED );
	access_flags |= Constants.ACC_PUBLIC;
	method_list[i].setAccessFlags( access_flags );
      }
    }
  }

  /**
   * Aggiunge il costruttore di default
   */
  private static boolean addInit( ClassGen cg, ConstantPoolGen cpg, InstructionFactory factory )
  {
    String class_name = cg.getJavaClass().getClassName();
    String superclass_name = cg.getJavaClass().getSuperclassName();
    JavaClass superclass_jclass = Repository.lookupClass( superclass_name );

    // la superclasse contiene il default constructor ?

    Method[] method_list = superclass_jclass.getMethods();

    for ( int i=0; i<method_list.length; ++i )
    {
      if ( method_list[i].getName().equals("<init>") && method_list[i].getSignature().equals(init_signature) )
      {
	int access_flags = method_list[i].getAccessFlags();

	if ((access_flags&Constants.ACC_PUBLIC)==0 && (access_flags&Constants.ACC_PROTECTED)==0)
	// arghhh non vi possiamo accedere
	  return false;
	else
	  break;
      }
    }

    // ok la superclasse ha il default constructor

    MethodGen mg_init;
    InstructionList il_init;

    il_init = new InstructionList();

    InvokeInstruction invoke_op;
    ReturnInstruction return_op;

    /**
     * Stato dello stack
     * 1)         this,                                                               TOP dello stack
     */
    il_init.append( factory.createLoad( Type.OBJECT, 0 ) );

    // aggiunge l'invocazione

//    invoke_op = factory.createInvoke( superclass_jclass.getClassName(), "<init>", new ObjectType( superclass_jclass.getClassName() ), Type.NO_ARGS, Constants.INVOKESPECIAL );
    invoke_op = factory.createInvoke( superclass_jclass.getClassName(), "<init>", Type.VOID, Type.NO_ARGS, Constants.INVOKESPECIAL );
    il_init.append( invoke_op );

    return_op = factory.createReturn( Type.VOID );
    il_init.append( return_op );


//    invoke = factory.createInvoke( "foreign.Base", "<init>", Type.OBJECT, Type.NO_ARGS, Constants.INVOKESPECIAL );

    mg_init = new MethodGen( Constants.ACC_PUBLIC, Type.VOID,
			      Type.NO_ARGS, new String[0],
			      "<init>",  class_name,
			       il_init, cpg );

    mg_init.setMaxStack();
    mg_init.setMaxLocals();

    cg.addMethod( mg_init.getMethod() );

    il_init.dispose();

    return true;
  }

  private static void addReadObject( ClassGen cg, ConstantPoolGen cpg, InstructionFactory factory )
  {
    String class_name = cg.getJavaClass().getClassName();
    String cis_signature = "run.container.Container.ContainerInputStream";
    ObjectType cis_type = new ObjectType( cis_signature );
    String string_signature = "java.lang.String";
    String superclass_name = cg.getJavaClass().getSuperclassName();
    JavaClass superclass_jclass = Repository.lookupClass( superclass_name );

    MethodGen mg_read;
    InstructionList il_read;

    il_read = new InstructionList();

    InvokeInstruction invoke_op;
    PUTFIELD putfield_op;
//    GETFIELD getfield_op;
    CHECKCAST  checkcast_op;
    ReturnInstruction return_op;

    /*
    ** aggiunge super.readObject() se la superclasse e' FastTransportable
    */
    if (superclass_jclass.instanceOf(FastTransportable_jclass) )
    {
      // load del reference this per la successiva operazione: putfield
      /**
       * Stato dello stack
       * 1)         this,  cis                                                             TOP dello stack
       */
      il_read.append( factory.createLoad( Type.OBJECT, 0 ) );

      // carica il primo argomento nello stack: cis
	/**
	 * Stato dello stack
	 * 2)         this,  cis                                                             TOP dello stack
	 */
      il_read.append( factory.createLoad( Type.OBJECT, 1 ) );

      invoke_op = factory.createInvoke( superclass_jclass.getClassName(), "readObject", Type.VOID, new Type[] { cis_type }, Constants.INVOKESPECIAL );
      il_read.append( invoke_op );
    }

    // gestione dei fields
    Field[] f = cg.getFields();

    for ( int i=0; i<f.length; ++i )
    {
      // saltiamo i campi non serializzabili
      if ( f[i].isTransient() || f[i].isStatic() )
	continue;

      // dati del campo da serializzare
      String field_signature = f[i].getSignature();
      Type field_type = Type.getType( field_signature );
      String field_name = f[i].getName();

      // metodo di input e tipo di ritorno
      String input_method;
      Type input_type;

      // opcodes comuni a tutte le istruzioni

      // load del reference this per la successiva operazione: putfield
      // Lo slot 0 delle variabili locali contiene il riferimento this,
      // lo copiamo nella posizione 0  dello stack operands

      /**
       * Stato dello stack
       * 1)         this,  cis                                                             TOP dello stack
       */
      il_read.append( factory.createLoad( Type.OBJECT, 0 ) );

      // carica il primo argomento nello stack: cis
      // Lo slot 1 delle variabili locali contiene il primo argomento della chiamata,
      // lo copiamo nella posizione 1  dello stack operands
      // per la successiva chiamata
	/**
	 * Stato dello stack
	 * 2)         this,  cis                                                             TOP dello stack
	 */
      il_read.append( factory.createLoad( Type.OBJECT, 1 ) );

      if ( field_type instanceof BasicType )
      {
	StringBuffer field_typename = new StringBuffer( field_type.toString() );
	field_typename.setCharAt(0,Character.toUpperCase(field_typename.charAt(0)) );

	Debug.println(field_typename.toString());

	input_method = "read"+field_typename;
	input_type = field_type;

	/**
	 * 3)              readXXX                                                        consuma il reference cis e produce un dato
	 *          this, dato di tipo XXX
	 */
	invoke_op = factory.createInvoke( cis_signature, input_method, input_type, Type.NO_ARGS, Constants.INVOKEVIRTUAL );
	il_read.append( invoke_op );
      }
      else
      if (field_type instanceof ArrayType )
      {
	input_method = "readArray";
	input_type = field_type;

	/**
	 * 3)              readArray                                                        consuma il reference cis e produce un dato
	 *          this, reference
	 */
	invoke_op = factory.createInvoke( cis_signature, input_method, input_type, Type.NO_ARGS, Constants.INVOKEVIRTUAL );
	il_read.append( invoke_op );

	/**
	 * 4)         CheckCast
	 */
	checkcast_op = factory.createCheckCast( (ReferenceType) field_type );
	il_read.append( checkcast_op );
      }
      else
      if (field_type instanceof ObjectType  )
      {
	if (! field_type.equals(string_signature) )
	{
	  input_method = "readObject";
	}
	else
	{
	  input_method = "readString";
	}

	input_type = field_type;

	/**
	 * 3)              readObject/readString                                                   consuma il reference cis e produce un dato
	 *          this, reference
	 */
	invoke_op = factory.createInvoke( cis_signature, input_method, input_type, Type.NO_ARGS, Constants.INVOKEVIRTUAL );
	il_read.append( invoke_op );

	/**
	 * 4)         CheckCast
	 */
	checkcast_op = factory.createCheckCast( (ReferenceType) field_type );
	il_read.append( checkcast_op );

      }
      else
      {
	// Campo sconosciuto
	input_type = null;
	Debug.println( "Tipo campo: " + f[i] + "non riconosciuto" );
      }


      /**
       * 5)              put_field                                                      consuma this, dato
       */
      putfield_op = factory.createPutField( class_name, field_name, field_type );
      il_read.append( putfield_op );


    } // end for



  // Osservazione: I

    return_op = factory.createReturn( Type.VOID );
    il_read.append( return_op );


//    invoke = factory.createInvoke( "foreign.Base", "<init>", Type.OBJECT, Type.NO_ARGS, Constants.INVOKESPECIAL );

    mg_read = new MethodGen( Constants.ACC_PUBLIC, Type.VOID,
			      new Type[] { cis_type }, new String[] { "cis" },
			      "readObject",  class_name,
			       il_read, cpg );

    mg_read.addException("run.serialization.SerializationException");

    mg_read.setMaxStack();
    mg_read.setMaxLocals();

    cg.addMethod( mg_read.getMethod() );

    il_read.dispose();
  }

  private static void addWriteObject( ClassGen cg, ConstantPoolGen cpg, InstructionFactory factory )
  {
    String class_name = cg.getJavaClass().getClassName();
    String cos_signature = "run.container.Container.ContainerOutputStream";
    Type cos_type = new ObjectType(cos_signature);
    String string_signature = "java.lang.String";
    String superclass_name = cg.getJavaClass().getSuperclassName();
    JavaClass superclass_jclass = Repository.lookupClass( superclass_name );
    Type object_type = new ObjectType( "java.lang.Object");
    Type fasttransportable_type = new ObjectType( "run.FastTransportable" );
    Type string_type = new ObjectType( string_signature );

    MethodGen mg_write;
    InstructionList il_write;

    il_write = new InstructionList();

    InvokeInstruction invoke_op;
//    PUTFIELD putfield_op;
    GETFIELD getfield_op;
//    CHECKCAST  checkcast_op;
    ReturnInstruction return_op;

    /*
    ** aggiunge super.writeObject() se la superclasse e' FastTransportable
    */
    if (superclass_jclass.instanceOf(FastTransportable_jclass) )
    {
      // load del reference this per la successiva operazione: putfield
      /**
       * Stato dello stack
       * 1)         this,  cis                                                             TOP dello stack
       */
      il_write.append( factory.createLoad( Type.OBJECT, 0 ) );

      // carica il primo argomento nello stack: cis
	/**
	 * Stato dello stack
	 * 2)         this,  cis                                                             TOP dello stack
	 */
      il_write.append( factory.createLoad( Type.OBJECT, 1 ) );

      invoke_op = factory.createInvoke( superclass_jclass.getClassName(), "writeObject", Type.VOID, new Type[] { cos_type }, Constants.INVOKESPECIAL );
      il_write.append( invoke_op );
    }

    // gestione dei fields
    Field[] f = cg.getFields();

    for ( int i=0; i<f.length; ++i )
    {
      // saltiamo i campi non serializzabili
      if ( f[i].isTransient() || f[i].isStatic() )
	continue;

      // dati del campo da serializzare
      String field_signature = f[i].getSignature();
      Type field_type = Type.getType( field_signature );
      String field_name = f[i].getName();

      // metodo di output e tipo di ritorno
      String output_method;
      Type output_type;

      // opcodes comuni a tutte le istruzioni


      // carica il primo argomento nello stack: cos
      // Lo slot 1 delle variabili locali contiene il primo argomento della chiamata,
      // lo copiamo nella posizione 0  dello stack operands
      // per la successiva chiamata
	/**
	 * Stato dello stack
	 * 1)         cos                                                             TOP dello stack
	 */

      il_write.append( factory.createLoad( Type.OBJECT, 1 ) );

      // load del reference this per la successiva operazione: getfield
      // Lo slot 0 delle variabili locali contiene il riferimento this,
      // lo copiamo nella posizione 1  dello stack operands

      /**
       * Stato dello stack
       * 2)         cos, this                                                             TOP dello stack
       */
      il_write.append( factory.createLoad( Type.OBJECT, 0 ) );

      // aggiungiamo la getfield

      /**
       * 3)              getfield                                                      consuma this
       *  Stato dello stack
       *           cos                                                             TOP dello stack
       */
      getfield_op = factory.createGetField( class_name, field_name, field_type );
      il_write.append( getfield_op );

      if ( field_type instanceof BasicType )
      {
	StringBuffer field_typename = new StringBuffer( field_type.toString() );
	field_typename.setCharAt(0,Character.toUpperCase(field_typename.charAt(0)) );

	Debug.println(field_typename.toString());

	output_method = "write"+field_typename;
	output_type = field_type;
      }
      else
      if (field_type instanceof ArrayType )
      {
	output_method = "writeArray";
	output_type = object_type;
      }
      else
      if (field_type instanceof ObjectType  )
      {
	if (! field_type.equals(string_signature) )
	{
	  output_method = "writeObject";
	  output_type = fasttransportable_type;
	}
	else
	{
	  output_method = "writeString";
	  output_type = string_type;
	}
      }
      else
      {
	// Campo sconosciuto
	output_type = null;
	output_method = null;
	Debug.println( "Tipo campo: " + f[i] + "non riconosciuto" );
	continue;
      }

      invoke_op = factory.createInvoke( cos_signature, output_method, Type.VOID, new Type[] { output_type}, Constants.INVOKEVIRTUAL );
      il_write.append( invoke_op );

    } // end for


  // Osservazione: I

    return_op = factory.createReturn( Type.VOID );
    il_write.append( return_op );


    mg_write = new MethodGen( Constants.ACC_PUBLIC, Type.VOID,
			      new Type[] { cos_type }, new String[] { "cos" },
			      "writeObject",  class_name,
			       il_write, cpg );

    mg_write.addException("run.serialization.SerializationException");

    mg_write.setMaxStack();
    mg_write.setMaxLocals();

    cg.addMethod( mg_write.getMethod() );

    il_write.dispose();
  }

  private static void addSUID( ClassGen cg, ConstantPoolGen cpg, InstructionFactory factory )
  {
    long SUID = java.io.ObjectStreamClass.lookup( cg.getClassName() ).getSerialVersionUID();

    FieldGen fg_suid = new FieldGen( Constants.ACC_PUBLIC|Constants.ACC_STATIC|Constants.ACC_FINAL, Type.LONG, "SUID", cpg );
    fg_suid.setInitValue(SUID);

    cg.addField( fg_suid.getField() );
  }

  private static void addSizeOf( ClassGen cg, ConstantPoolGen cpg, InstructionFactory factory )
  {

  }

}









