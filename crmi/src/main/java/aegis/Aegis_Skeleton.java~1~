package aegis;


 /**
 * classe generata
 * Rappresenta l'endpoint della chiamata
 * La chiamata parte dal basso per risalire
*/

import aegis.Rs;

import run.serialization.Container;
import run.stub_skeleton.Skeleton;

import run.RemoteException;
import run.Services;
import run.serialization.SizeOf;
import run.serialization.SerializationException;

public class Aegis_Skeleton extends Skeleton
{

  public Aegis_Skeleton( Services _services )
  {
    super( _services );
  }

/**
 * Il nome del metodo e' importante:
 * "methodname"_invoke
 */

  Container invoke_f1__519339342( Container container ) throws RemoteException, SerializationException
  {
    Container.ContainerInputStream cis = container.getContainerInputStream(true);

    // il suid sara' calcolata al tempo della compilazione
    // per adesso usiamo uno shortcut
//    long suid = java.io.ObjectStreamClass.lookup(X.class).getSerialVersionUID();

/**
 *  Sullo stream i campi sono ordinati per tipo e per ordine alfabetico.
 * quindi prima i bytes, chars, float, ..
 * poi gli array...di primitivi
 * le matrici (?)
 * gli oggetti
 * gli array di oggetti
 * le matrici di oggetti (?)
 */

    int i = cis.readInt();
    int[] ia = cis.readIntArray();
    X x = (X) cis.readObject( X.class );

    /**
     * up-call
     * int f1( X x, int[] ia, int i ) throws RemoteException;
     */
    Rs server_ref = (Rs) services;
    int invoke_res = server_ref.f1( x, ia, i ) ;

    Container res = new Container( SizeOf.INT );
    Container.ContainerOutputStream cos = res.getContainerOutputStream( false );
    cos.writeInt( invoke_res );

    return res;
  }

  Container invoke_f2_12345678( Container container ) throws RemoteException, SerializationException
  {
    Container.ContainerInputStream cis = container.getContainerInputStream( true );

    // il suid sara' calcolata al tempo della compilazione
    //
//    long suid = java.io.ObjectStreamClass.lookup(X.class).getSerialVersionUID();


/**
 *  Sullo stream i campi sono ordinati per tipo e per ordine alfabetico.
 * quindi prima i bytes, chars, float, ..
 * poi gli array...di primitivi
 * le matrici ?
 * gli oggetti
 * gli array di oggetti
 * le matrici di oggetti?
 */

    int i = cis.readInt();
    X x = (X) cis.readObject( X.class );
    X[] xa = (X[]) cis.readObjectArray( X.class );

    /**
     * up-call
     *   int[] f2( X x, X[] xa, int i ) throws RemoteException;
     */
    Rs server_ref = (Rs) services;
    int[] invoke_res = server_ref.f2( x, xa, i );

    Container res = new Container( SizeOf.array(invoke_res) );
    Container.ContainerOutputStream cos = res.getContainerOutputStream(true);
    cos.writeIntArray( invoke_res );

    return res;
  }

}