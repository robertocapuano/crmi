package aegis;

import run.Services;
import run.RemoteException;

import run.stub_skeleton.Stub;

import run.exec.Manager;
import run.exec.ExecException;

import run.reference.RemoteServiceReference;

import run.session.Callgram;

import run.serialization.SizeOf;
import run.serialization.Container;
import run.serialization.SerializationException;

import run.transport.TransportException;

import rio.registry.RegistryServicesReference;

public class Aegis_Stub extends Stub implements Rs // Nota: Rs extends services
{
  public Aegis_Stub( RegistryServicesReference rsr )
  {
    super( rsr );
  }

  // primo servizio
  public int f1( X x, int[] ia, int i ) throws RemoteException
  {
    try
    {
      int f1_framesize = SizeOf.object( x );
      f1_framesize += SizeOf.array(ia);
      f1_framesize += SizeOf.INT;

      Container container = new Container( f1_framesize );

      // true indica che serializzeremo anche oggetti quindi creare la reference_table
      Container.ContainerOutputStream cos = container.getContainerOutputStream( true );

      cos.writeInt( i );
      cos.writeIntArray( ia );
      cos.writeObject( x );
      cos.close();

      // migliorare qui per l'individuazione del servizio remoto.
      // firma aggiunta a "mano"
      RemoteServiceReference remote_services_reference = registry_services_reference/*campo ereditato*/.toRemoteServiceReference( "f1", "(Laegis/X;[II)I" );

      Callgram callgram = new Callgram( Callgram.CALL, remote_services_reference, null, container );

      Callgram rcv_callgram = Manager.execRemoteCall( callgram );
//      callgram.free();
//      callgram = null;

      Container res = rcv_callgram.getContainer();

      // argomento false: il risultato e' un primitivo
      Container.ContainerInputStream cis = res.getContainerInputStream( false );

      int _f1 = cis.readInt();

      rcv_callgram.free();
      rcv_callgram = null;
      return _f1;
    }
    catch (ExecException exec_exception ) { throw new RemoteException( exec_exception.getMessage() ); }
    catch (SerializationException serialization_exception) { throw new RemoteException(serialization_exception.getMessage() ); }
    catch (TransportException transport_exception) { throw new RemoteException( transport_exception.getMessage() ); }
  }

/**
 *  secondo servizio
 */

  public int[] f2( X x, X[] xa, int i ) throws RemoteException
  {
    try
    {
      int f2_framesize = SizeOf.object( x ) + SizeOf.array( xa ) + SizeOf.INT;

      Container container = new Container( f2_framesize );

      // true indica che serializzeremo anche oggetti quindi creare la reference_table
      Container.ContainerOutputStream cos = container.getContainerOutputStream( true );

  /**
   *  Sullo stream i campi sono ordinati per tipo e per ordine alfabetico.
   * quindi prima i bytes, chars, float, ..
   * poi gli array...di primitivi
   * le matrici (?)
   * gli oggetti
   * gli array di oggetti
   * le matrici di oggetti (?)
   */
      cos.writeInt( i );
      cos.writeObject( x );
      cos.writeObjectArray( xa );
      cos.close();

      // migliorare qui per l'individuazione del servizio remoto.
      // firma aggiunta a "mano"
      RemoteServiceReference remote_service_reference = registry_services_reference/*campo ereditato*/.toRemoteServiceReference( "f2", "(Laegis/X;[Laegis/X;I)[I" );
      Callgram callgram = new Callgram( Callgram.CALL, remote_service_reference, null, container );

      Callgram rcv_callgram = Manager.execRemoteCall( callgram );

      Container res = rcv_callgram.getContainer();

      // argomento false: il risultato e' un primitivo
      Container.ContainerInputStream cis = res.getContainerInputStream( false );

      int[] _f2 = cis.readIntArray();

      rcv_callgram.free();

      return _f2;
    }
    catch (ExecException exec_exception ) { throw new RemoteException( exec_exception.getMessage() ); }
    catch (SerializationException serialization_exception) { throw new RemoteException(serialization_exception.getMessage() ); }
    catch (TransportException transport_exception) { throw new RemoteException( transport_exception.getMessage() ); }
  }

}