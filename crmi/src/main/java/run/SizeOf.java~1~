package run;

import java.lang.reflect.*;

import com.borland.primetime.util.Debug;

import run.serialization.Container;

/**
 * Questa classe e' usata per la serializzazione.
 * Le dimensioni ritornate comprendono il protocollo implementato in @ref run.serialization.Container
 */
public abstract class SizeOf
{
  public static int VOID = 0;
  public static int BOOLEAN = 1;
  public static int BYTE = 1;
  public static int CHAR  = 2;
  public static int SHORT = 2;
  public static int INT = 4;
  public static int LONG = 8;
  public static int FLOAT = 4;
  public static int DOUBLE = 8;


  /**
   * Dimensione di un array di oggetti Transportable
   */
  public final static int objectArray( Transportable[] array )
  {
    int size = 0;

    for ( int i=0; i<array.length; ++i )
      size += array[i].sizeOf();

    // aggiungiamo la length
    size += SizeOf.INT;
    // aggiungiamo il nome della base class
    size += SizeOf.stringUTF8( array.getClass().getComponentType().getName() );
    return size;
  }

  /**
   * Dimensione di un array di primitivi
   */
  public final static int array( Object array )
  {
    Class cl = array.getClass();
    String array_type = cl.getName();

    Debug.assert( cl.isArray() && cl.getComponentType().isPrimitive() );

    int len = Array.getLength(array);
    int component_size = SizeOf.primitive( array_type.charAt(1) ); // [I

    /*
    Class component_class = cl.getComponentType();
    String component_type = component_class.getName();
    int component_size = primitive( component_type.charAt(0) );
    */

    // dimensione del vettore
    int size = component_size * len;

    // aggiungiamo il formato del protocollo
    size += Container.SIZE_OF_PRIMITIVE_ARRAY_HEADER;

    return size;
  }


  public final static int primitive( char type )
  {
      switch (type)
      {
	case 'B':
	  return BYTE;
	case 'C':
	  return CHAR;
	case 'D':
	  return DOUBLE;
	case 'F':
	  return FLOAT;
	case 'I':
	  return INT;
	case 'S':
	  return SHORT;
	case 'Z':
	  return BOOLEAN;
      } // end switch

      return 0;
  }

  /**
   * Dimensione di una stringa
   */
  public final static int string( String str )
  {
    int size = stringUTF8(str);
    size += Container.SIZE_OF_STRING_HEADER;
    return size;
  }

  /**
   * Ritorna la dimensione della codifica in utf8.
   * La lunghezza comprende i due caratteri che rappresentano la lunghezza della stringa.
   */
  private final static int stringUTF8( String str )
  {
    int strlen = str.length();
    int utflen = 0;
    char[] charr = new char[strlen];
    int c, count = 0;

    str.getChars(0, strlen, charr, 0);

    for (int i = 0; i < strlen; i++) {
	c = charr[i];
	if ((c >= 0x0001) && (c <= 0x007F)) {
	    utflen++;
	} else if (c > 0x07FF) {
	    utflen += 3;
	} else {
	    utflen += 2;
	}
    }

    return utflen;
  }

}