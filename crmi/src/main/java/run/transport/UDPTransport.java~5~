package run.transport;

import java.net.*;
import java.io.*;
import java.util.*;

import com.borland.primetime.util.Debug;

import run.Utility;
import run.serialization.*;
import run.session.*;

/**
 * Gestisce la FIFO dell'invio/ricezione dei datagrammi UDP
 *
 * Arriva un datagramma UDP, se e' associata ad una sessione esistente
 * 1) lo passa alla sessione esistente
 *
 * Altrimenti
 * 1) crea la sessione,
 * 2) associa il numero di sessione con la sessione, in modo che altri pacchetti UDP vengono memorizzati nella stessa sessione.
 * 3) Passa il datagram alla sessione
 *
 * NOTA: Vi sono due istanze di UDP: per ethernet e per myrinet
 */

public class UDPTransport extends Transport
{

  /**
   * FastEthernet
   */
  public final static int ETHERNET_PACKET_SIZE = 1500-28;
  public final static int ETHERNET_WINDOW_SIZE = DEFAULT_WINDOW_SIZE; // 16
  public final static int ETHERNET_PORT = 4096;

  /**
   * Myrinet
   */
  public final static int MYRINET_PACKET_SIZE = 3752-28;
  public final static int MYRINET_WINDOW_SIZE = DEFAULT_WINDOW_SIZE; // 16
  public final static int MYRINET_PORT = 8192;
  /**
   * Loopback
   */
  public final static int LOOPBACK_PACKET_SIZE = ETHERNET_PACKET_SIZE;
  public final static int LOOPBACK_WINDOW_SIZE = DEFAULT_WINDOW_SIZE; // 16
  public final static int LOOPBACK_PORT = 2048;

  /**
   * TIMEOUT per questo trasporto
   */
  private static int TIME_OUT = 10;

  /**
   * dimensione del buffer di input
   */
  protected static int INPUT_BUFFER_SIZE = 64*1024;

  /**
   * dimensione del buffer di input
   */
  protected static int OUTPUT_BUFFER_SIZE = 64*1024;

  /**
   * Coda FIFO in uscita
   */
  protected LinkedList FIFO_out;
  /**
   * Coda FIFO in ingresso
   */
  protected LinkedList FIFO_in;

  /**
   * Socket UDP
   */
  protected DatagramSocket socket;

  /**
   * Thread per la gestione dell'IO
   */
  protected ThreadGroup fifo_threadg;
  protected Thread fifo_in_thread;
  protected Thread fifo_out_thread;

  /**
   * Dimensione dei pacchetti
   */
  public UDPTransport( IPAddress _local_address, int _packet_size, int _window_size ) throws TransportException
  {
    super( NetAddress.IP_ADDRESS, _local_address,  _packet_size, _window_size );

    FIFO_out = new LinkedList();
    FIFO_in = new LinkedList();
    IPAddress ip_address = (IPAddress) local_address;

    try { socket = new DatagramSocket( ip_address.getPort(), ip_address.toInetAddress() ); }
    catch (SocketException se ) { throw new TransportException( "Errore sull'apertura del socket: " + se.getMessage() ); }

    // chiamata di metodi in caso di ini_port ==0
    // non so se sia necessiario!
/*
    InetAddress local_inet_address = socket.getInetAddress();
    int local_port = socket.getPort();
    local_address = new IPAddress( local_inet_address, local_port );
*/

    ThreadGroup fifo_threadg = new ThreadGroup( "UDP Transport, FIFO Group" );
    fifo_in_thread = new FIFOInThread( fifo_threadg );
    fifo_out_thread = new FIFOOutThread( fifo_threadg );
    start();
  }


  /**
   * Accoda il Packet per la trasmissione
   */
  public void send( Packet p )
  {
    synchronized ( FIFO_out )
    {
      FIFO_out.add( p );
      FIFO_out.notifyAll();
    }
  }

  public void setFromDatagram( DatagramPacket in_datagram, Packet in_packet, Container.ContainerInputStream cis ) throws SerializationException
  {
    // true in quanto contiene stringhe che sono "oggetti"
    cis.reset( true );

    IPAddress remote_address = new IPAddress( in_datagram.getAddress(), in_datagram.getPort() );

    // campi comuni
    byte opcode = cis.readByte();
    int session_id = cis.readInt();

    // campi non comuni
    int total_number, callgram_size;

    switch ( opcode )
    {
      case Opcodes.INIT:
	total_number = cis.readInt();
	callgram_size = cis.readInt();
	String services_name = cis.readStringUTF8();
	String service_name = cis.readStringUTF8();
	String service_signature = cis.readStringUTF8();

	in_packet.setInit( remote_address, session_id, total_number, callgram_size, services_name, service_name, service_signature );
	break;
      case Opcodes.RET:
        total_number = cis.readInt();
	callgram_size = cis.readInt();
	int return_value = cis.readInt();

	in_packet.setRet(remote_address, session_id, total_number, callgram_size, return_value );
	break;
      case Opcodes.DATA:
        total_number = cis.readInt();
	int sn = cis.readInt();
	int data_size = in_datagram.getLength() - Packet.SIZE_OF_DATA_HEADER;

	in_packet.setData( remote_address, session_id, total_number, sn, in_datagram.getData(), Packet.START_OF_DATA, data_size );
	break;
      case Opcodes.RN:
        total_number = cis.readInt();
	int rn = cis.readInt();

	in_packet.setRN( remote_address, session_id, total_number, rn );
	break;
      // non hanno campi specifici
      case Opcodes.DISC:
	in_packet.setDisc( remote_address, session_id );
	break;
      case Opcodes.ACKI:
	in_packet.setAckI( remote_address, session_id );
	break;
      case Opcodes.ACKD:
	in_packet.setAckD( remote_address, session_id );
	break;
      case Opcodes.ACKR:
	in_packet.setAckR( remote_address, session_id );
	break;
      default:
	Debug.println("Packet con opcode sconosciuto");
    }
  }

  public void setToDatagram( DatagramPacket out_datagram, Packet out_packet, Container.ContainerOutputStream cos ) throws SerializationException
  {
    // true in quanto contiene stringhe che sono "oggetti"
    cos.reset( true );

    IPAddress remote_address = (IPAddress) out_packet.getRemoteAddress();
    out_datagram.setAddress( remote_address.toInetAddress() );
    out_datagram.setPort( remote_address.getPort() );

    // campi comuni
    cos.writeByte( out_packet.getOpcode() );
    cos.writeInt( out_packet.getSessionId() );

    switch ( out_packet.getOpcode() )
    {
      case Opcodes.INIT:
        cos.writeInt( out_packet.getTotalNumber() );
	cos.writeInt( out_packet.getCallgramSize() );
	cos.writeStringUTF8( out_packet.getServicesName() );
	cos.writeStringUTF8( out_packet.getServiceName() );
	cos.writeStringUTF8( out_packet.getServiceSignature() );
	break;
      case Opcodes.RET:
        cos.writeInt( out_packet.getTotalNumber() );
	cos.writeInt( out_packet.getCallgramSize() );
	cos.writeInt( out_packet.getReturnValue() );
	break;
      case Opcodes.DATA:
        cos.writeInt( out_packet.getTotalNumber() );
	cos.writeInt( out_packet.getSN() );
	System.arraycopy( out_packet.getData(), 0, out_datagram.getData(), Packet.START_OF_DATA, out_packet.getDataSize() );
	break;
      case Opcodes.RN:
        cos.writeInt( out_packet.getTotalNumber() );
	cos.writeInt( out_packet.getRN() );
	break;
      case Opcodes.ACKI:
      case Opcodes.ACKR:
      case Opcodes.DISC:
      case Opcodes.ACKD:
	// non hanno campi specifici
	break;
      default:
	Debug.println("Packet con opcode sconosciuto");
    }
  }



  /**
   *  Delega la ricezione/invio dei packet ai due threads
   */

  public void run()
  {
    fifo_in_thread.start();
    fifo_out_thread.start();
  } // end run()


// Gestione del socket

  /**
   * Fifo Output thread
   */

  private class FIFOInThread extends Thread
  {
    FIFOInThread( ThreadGroup g )
    {
      super( g, "FIFOInThread" );
    }

    public void run()
    {
      Packet in_packet, out_packet;
      byte[] in_buffer = new byte[INPUT_BUFFER_SIZE];
      DatagramPacket in_datagram = new DatagramPacket( in_buffer, INPUT_BUFFER_SIZE );

      Frame frame = new Frame( in_buffer );
      Container container = new Container( frame );
      Container.ContainerInputStream cis = container.getContainerInputStream( true );

      while (true)
      {
	try
	{
	  socket.receive( in_datagram );
	}
	catch ( IOException ioe ) { Debug.print( ioe.toString() ); }

	in_packet = packet_pool.get();

	/**
	 * INIT -> ACKI
	 * ACKI -> CALL
	 * DISC -> ACKD
	 * ACKD -> NOP
	 * RN -> DATA
	 * DATA -> RN
	 * RET -> ACKR
	 */

	try
	{
	  setFromDatagram( in_datagram, in_packet, cis );
	  in_packet.setTransport( UDPTransport.this );

	  // 1. in_datagram ed out_datagram puntano allo stesso oggetto ma e' modificato
	  // 2. dispatch smista il packet

	  out_packet = SessionTable.dispatch( in_packet );

	  if ( out_packet.getOpcode() != Opcodes.NOP )
	  {
	    send( out_packet );
	  }
	  else
	  {
	    // in caso di NOP il pacchetto e' scartato.
	  }
	}
	catch (SerializationException se )
	{
	  Debug.print( se.getMessage() );
	}


      } // end forever
    } // end run


  } // end FIFOInThread


  /**
   * Fifo Output thread
   */

  private class FIFOOutThread extends Thread
  {
    FIFOOutThread( ThreadGroup g )
    {
      super( g, "FIFOOutThread" );
    }

    public void run()
    {
      Packet out_packet;

      byte[] out_buffer = new byte[OUTPUT_BUFFER_SIZE];
      DatagramPacket out_datagram = new DatagramPacket( out_buffer, OUTPUT_BUFFER_SIZE );

      Frame frame = new Frame( out_buffer );
      Container container = new Container( frame );
      Container.ContainerOutputStream cos = container.getContainerOutputStream( true );

      while (true)
      {
	  synchronized ( FIFO_out )
	  {
	      while ( FIFO_out.size()==0 )
	      {
		try { FIFO_out.wait( TIME_OUT ); }
		catch ( InterruptedException ie ) { Debug.print( ie.getMessage() ); }
	      }

	      out_packet = (Packet) FIFO_out.removeFirst();
	  }

	  try
	  {
	    // la synchronized qui serve per evitare di sovrascrivere packet di tipo RN mentre questi e' in trasmissione
	    // vedi SessionReceive
	    synchronized (out_packet)
	    {
	      setToDatagram( out_datagram, out_packet, cos );
	      // si restituisce il packet al pool a cui appartiene, non e' detto che sia this.packet_pool
	      out_packet.free();
	    }

	    // si invia il datagram
	    socket.send( out_datagram );
	  }
	  // setToDatagram()
	  catch ( SerializationException se ) { Debug.print( se.getMessage() ); }
	  // socket.send()
	  catch ( IOException ioe ) { Debug.print( ioe.toString() ); }

      } // end forever

    } // end run

  }
}


