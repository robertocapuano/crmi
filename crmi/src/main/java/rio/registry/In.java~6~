package rio.registry;

import run.reference.*;
import run.serialization.Container;
import run.serialization.Container.ContainerInputStream;
import run.serialization.SerializationException;

import run.stub_skeleton.Skeleton;
import run.RemoteException;
import run.Services;
import run.SizeOf;

/**
 * In e' contattato dal registry remoto su una interrogazione di un servizio globale.
 *  Service          Global
 *
 *    /\         /\             \/
 *     |         |              |
 *   Stub       In              Out
 *      \      /                |
 *       Local                  |
 *         |                    |
 *      Dispatcher              |
 *                              |
 *                          SessionTable
 *
 */

public class In extends Skeleton implements Services
{
  public In( Services _services )
  {
    super( _services );
  }

  // firma di register:
  // (rio/registry/RegistryServicesReference;)V ---> _642910005
  Container invoke_register__642910005( Container container ) throws RemoteException
  {
    Container.ContainerInputStream cis = container.getContainerInputStream( true );

/*
    try
    {
*/
    // parametri di ingresso
      RegistryServicesReference registry_ref = (RegistryServicesReference) cis.readObject( RegistryServicesReference.class );
      Global.register( registry_ref );
      Container res = new Container( SizeOf.VOID );
//    Container.ContainerOutputStream cos = res.getContainerOutputStream();
//    cos.writeVoid(  );
      return res;
/*
    }
    catch (RegistryException registry_exception )
    {
      RemoteException remote_exception = new RemoteException( registry_exception.getMessage() );
      throw remote_exception;
    }
    catch (SerializationException serialization_exception )
    {
      RemoteException remote_exception = new RemoteException( serialization_exception.getMessage() );
      throw remote_exception;
    }
*/
  }

  // firma:
  // (java/lang/String;)rio/registry/RegistryServiceReference;
  // _580155384
  Container invoke_lookup__580155384( Container container ) throws RemoteException, SerializationException
  {
    Container.ContainerInputStream cis = container.getContainerInputStream( true );

/*
    try
    {
*/
      // parametri di ingresso
      String services_name = cis.readString( );

      RegistryServicesReference registry_ref = Global.lookup( services_name );

      Container res = new Container( registry_ref.sizeOf() );
      Container.ContainerOutputStream cos = res.getContainerOutputStream( true );
      cos.writeObject( registry_ref );
      return res;
/*
    }
*/
/*    catch (RegistryException registry_exception )
    {
      RemoteException remote_exception = new RemoteException( registry_exception.getMessage() );
      throw remote_exception;
    }
*/
/*
    catch (SerializationException serialization_exception )
    {
      RemoteException remote_exception = new RemoteException( serialization_exception.getMessage() );
      throw remote_exception;
    }
*/

  }

}
