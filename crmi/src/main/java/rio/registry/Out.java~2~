package rio.registry;

import run.reference.*;

/**
 * Invia le richieste a remoto
 * Riceve le richieste da remoto ed interroga il RegistryImpl
 */

class Out extends Stub implements Services
{
  public Out( RegistryServiceReference registry_ref ) // reference al registry remoto
  {
    super( registry_ref );
  }

  /**
   * 1. contatta l'host mandandogli RegistrySR
   * 2. Riceve OK
   */
  void register( NetAddress registry_address, RegistryServicesReference registry_ref ) throws RemoteException
  {
    int register_framesize = registry_ref.sizeOf();

    RegistryServicesReference registry_reference = new RegistryServicesReference( registry_address, "Registry", Global.registry_services )
    Out remote_registry = new Out( ;

    Container container = new Container( register_framesize );

    // true indica che serializzeremo anche oggetti quindi creare la reference_table
    Container.ContainerOutputStream cos = container.getContainerOutputStream( true );

    cos.writeObject( registry_ref );

    Callgram callgram = new Callgram( Callgram.CALL, remote_services_reference, null, container );

    Callgram rcv_callgram = Manager.execCall( callgram );

    Container res = rcv_callgram.getContainer();

    return;
  }

  /**
   * 1. Contatta "host" chiedendogli RemoreSF
   */
  RemoteServiceReference lookup( /*NetAddress registry_address,*/ String services_name ) throws RegistryException
  {
    int lookup_framesize = SizeOf.stringUTF32( services_name );

    Container container = new Container( lookup_framesize );

    // true indica che serializzeremo anche oggetti quindi creare la reference_table
    Container.ContainerOutputStream cos = container.getContainerOutputStream( false );

    cos.writeString( services_name );

    Callgram callgram = new Callgram( Callgram.CALL, remote_services_reference, null, container );

    Callgram rcv_callgram = Manager.execCall( callgram );

    Container res = rcv_callgram.getContainer();
    int register_framesize = registry_ref.sizeOf();

    Container container = new Container( register_framesize );

    // true indica che serializzeremo anche oggetti quindi creare la reference_table
    Container.ContainerOutputStream cos = container.getContainerOutputStream( true );

    cos.writeObject( registry_ref );

    Callgram callgram = new Callgram( Callgram.CALL, remote_services_reference, null, container );

    Callgram rcv_callgram = Manager.execCall( callgram );

    Container res = rcv_callgram.getContainer();

    // argomento true: il risultato e' un oggetto
    Container.ContainerInputStream cis = res.getContainerInputStream( true );

    // il suid sara' calcolata al tempo della compilazione
    long suid = java.io.ObjectStreamClass.lookup(RemoteServiceReference.class).getSerialVersionUID();

    RemoteServiceReference remote_ref = cis.readObject( RemoteServiceReference.class, suid );
    return;
  }


}


